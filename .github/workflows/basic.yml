name: GKI Kernel Build for Sony SM8550

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Make a release?'
        required: true
        default: true
        type: boolean
      android_version:
        description: 'Android version'
        required: true
        default: 'android15'
      kernel_version:
        description: 'Kernel version'
        required: true
        default: '6.6'
      sub_level:
        description: 'Sub-level number'
        required: true
        default: '1'
      os_patch_level:
        description: 'OS patch level'
        required: true
        default: '2025-09-01'
      kernelsu_variant:
        description: 'KernelSU variant'
        required: true
        default: 'SukiSU'
      kernelsu_branch:
        description: 'KernelSU branch'
        required: true
        default: 'Stable'
      supp_op:
        description: 'Apply optional platform patches?'
        required: true
        default: false
        type: boolean
      use_zram:
        description: 'Enable ZRAM patches?'
        required: true
        default: true
        type: boolean
      use_kpm:
        description: 'Enable KPM patching?'
        required: true
        default: true
        type: boolean
      set_defbbr:
        description: 'Set BBR as default congestion control?'
        required: true
        default: true
        type: boolean
      version:
        description: 'Custom kernel version'
        required: false

jobs:
  build-kernel:
    runs-on: ubuntu-latest
    env:
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'false'
          verbose: 'true'

      - name: Set CONFIG variable
        run: |
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: Install build dependencies
        run: sudo apt update && sudo apt install -y ccache python3 git curl unzip gzip build-essential

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}-ccache-

      - name: Clone kernel source
        run: |
          git clone -b lineage-22.2 --depth 1 https://github.com/LineageOS/android_kernel_sony_sm8550.git kernel
          git clone -b lineage-22.2 --depth 1 https://github.com/LineageOS/android_kernel_sony_sm8550-modules.git modules

      - name: Set REMOTE_BRANCH
        run: |
          KERNEL_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          REMOTE_BRANCH="$KERNEL_BRANCH"
          echo "REMOTE_BRANCH=$REMOTE_BRANCH" >> $GITHUB_ENV

      - name: Optional: Apply platform-specific fixes (supp_op)
        if: ${{ inputs.supp_op == true }}
        run: |
          echo 'Applying platform-specific support patches...'
          cd "kernel/common/drivers/" || exit 0
          curl -LSs "https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/dev/hmbird_patch.c" -o hmbird_patch.c || true
          if [ -f hmbird_patch.c ]; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi

      - name: Apply KernelSU
        run: |
          cd kernel
          BRANCH_ARG=""
          case "${{ inputs.kernelsu_branch }}" in
            Stable) BRANCH_ARG="-s susfs-main" ;;
            Dev)
              case "${{ inputs.kernelsu_variant }}" in
                Official|MKSU) BRANCH_ARG="-s main" ;;
                Next) BRANCH_ARG="-s next-susfs-dev" ;;
                SukiSU) BRANCH_ARG="-s susfs-test" ;;
              esac
              ;;
            *) echo "Invalid KernelSU branch!" >&2; exit 1 ;;
          esac

          case "${{ inputs.kernelsu_variant }}" in
            Official)
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH_ARG ;;
            Next)
              curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash $BRANCH_ARG ;;
            MKSU)
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH_ARG ;;
            SukiSU)
              curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH_ARG ;;
          esac

      - name: Apply SUSFS patches
        run: |
          cd kernel
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd ./common
          patch -p1 --forward --fuzz=3 < 50_add_susfs_in_gki-*.patch || true

      - name: Apply ZRAM patches
        if: ${{ inputs.use_zram == true }}
        run: |
          cd kernel/common
          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp ../../SukiSU_patch/other/zram/zram_patch/${{ inputs.kernel_version }}/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true

      - name: Update gki_defconfig
        run: |
          CONFIG_FILE="kernel/common/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_KSU=y" >> $CONFIG_FILE
          echo "CONFIG_KSU_SUSFS=y" >> $CONFIG_FILE
          echo "CONFIG_ZRAM=y" >> $CONFIG_FILE
          echo "CONFIG_ZSMALLOC=y" >> $CONFIG_FILE
          if [ "${{ inputs.set_defbbr }}" == "true" ]; then
            echo "CONFIG_DEFAULT_BBR=y" >> $CONFIG_FILE
          fi

      - name: Build kernel
        run: |
          cd kernel
          make O=out ARCH=arm64 gki_defconfig
          make -j$(nproc) O=out ARCH=arm64 CC="ccache clang"

      - name: Package boot images
        run: |
          cd kernel/out
          gzip -n -k -f -9 Image
          mkdir -p ../../bootimgs
          cp Image Image.lz4 Image.gz ../../bootimgs/
