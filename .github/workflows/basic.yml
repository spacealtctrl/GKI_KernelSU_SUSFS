name: Build Kernel with GKI Defconfig

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git make ccache lzop bison flex bc libssl-dev

    - name: Clone clang toolchain
      run: |
        git clone https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 --depth=1 -b android15-release clang-toolchain

    - name: Clone kernel source
      run: |
        git clone https://github.com/LineageOS/android_kernel_sony_sm8550.git kernel
        cd kernel
        git checkout lineage-22.2  # Or appropriate branch for Android 15

    - name: Clone kernel modules source
      run: |
        git clone https://github.com/LineageOS/android_kernel_sony_sm8550-modules.git modules
        cd modules
        git checkout lineage-22.2  # Or appropriate branch for Android 15

    - name: Configure kernel
      run: |
        cd kernel
        make ARCH=arm64 gki_defconfig

    - name: Build kernel
      run: |
        cd kernel
        export PATH=$PATH:$(pwd)/../clang-toolchain/bin
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        export LD_LIBRARY_PATH=$(pwd)/../clang-toolchain/lib64:$LD_LIBRARY_PATH
        make ARCH=arm64 CC=clang CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LD=ld.lld -j$(nproc)
      id: build-kernel

    - name: Build kernel modules
      run: |
        cd modules
        export PATH=$PATH:$(pwd)/../clang-toolchain/bin
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        export LD_LIBRARY_PATH=$(pwd)/../clang-toolchain/lib64:$LD_LIBRARY_PATH
        make ARCH=arm64 CC=clang CLANG_TRIPLE=aarch64-linux-gnu- CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnueabi- LD=ld.lld -j$(nproc)
      if: steps.build-kernel.outcome == 'success'

    - name: Check build status
      if: steps.build-kernel.outcome != 'success'
      run: |
        echo "Kernel build failed"
        exit 1

    - name: Create anykernel3.zip with bootable image
      run: |
        mkdir -p anykernel
        cp kernel/arch/arm64/boot/Image.gz-dtb anykernel/
        # Assuming anykernel3 template files are present, adjust this step as needed
        echo "Packaging kernel and modules into anykernel3.zip"
        # Placeholder: Add commands to include modules if needed
        zip anykernel3.zip anykernel/Image.gz-dtb
        # Add other necessary files to anykernel3.zip here
        echo "Bootable image packaged into anykernel3.zip"

    - name: Upload anykernel3.zip
      uses: actions/upload-artifact@v2
      with:
        name: anykernel3.zip
        path: anykernel3.zip
