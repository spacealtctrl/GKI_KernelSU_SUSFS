name: Simple Android Kernel Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Setup Job
        run: |
          echo "Starting kernel build job..."
          echo "Runner: $(uname -a)"
          echo "Available cores: $(nproc)"
          echo "Memory: $(free -h)"

      - name: Checkout Kernel Source
        run: |
          rm -rf kernel || true
          git clone https://github.com/spacealtctrl/android_kernel_sony_sm8550 \
            -b lineage-22.2 kernel
          echo "Kernel source cloned successfully"
          
          # Check what's in the kernel's dt-bindings/bindings
          echo "Checking kernel's existing dt-bindings/bindings:"
          if [ -d "kernel/include/dt-bindings/bindings" ]; then
            echo "Found kernel/include/dt-bindings/bindings"
            ls -la kernel/include/dt-bindings/bindings/ | head -10
            echo "Looking for audio-ext-clk.h:"
            find kernel/include/dt-bindings/bindings -name "*audio*" -ls
          fi

      - name: Clone Devicetrees
        run: |
          rm -rf devicetrees-temp || true
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550-devicetrees.git \
            -b lineage-22.2 --depth=1 devicetrees-temp
          echo "Devicetrees cloned successfully"

      - name: Copy Devicetrees to Kernel (EXCLUDING bindings folder)
        run: |
          # Remove old vendor directory if exists
          rm -rf kernel/arch/arm64/boot/dts/vendor
          mkdir -p kernel/arch/arm64/boot/dts/vendor
          
          # Copy everything EXCEPT the bindings folder (it's just YAML docs)
          find devicetrees-temp -maxdepth 1 -mindepth 1 ! -name bindings -exec cp -r {} kernel/arch/arm64/boot/dts/vendor/ \;
          
          # Clean up
          rm -rf devicetrees-temp
          
          echo "Devicetrees copied to vendor directory (excluding bindings)"
          echo "Vendor directory contains:"
          ls -la kernel/arch/arm64/boot/dts/vendor/ | head -20

      - name: Copy Kernel's dt-bindings to Vendor Directory
        run: |
          echo "Copying kernel's dt-bindings contents to vendor directory..."
          
          # Copy ALL CONTENTS of dt-bindings directly into vendor
          cp -rf kernel/include/dt-bindings/* kernel/arch/arm64/boot/dts/vendor/
          
          echo "Kernel dt-bindings contents copied to vendor directory"
          echo "Vendor directory now contains:"
          ls -la kernel/arch/arm64/boot/dts/vendor/ | head -20
          
          # Specifically check for the bindings folder
          if [ -d "kernel/arch/arm64/boot/dts/vendor/bindings" ]; then
            echo "Bindings folder in vendor:"
            ls -la kernel/arch/arm64/boot/dts/vendor/bindings/ | head -10
          fi

      - name: Setup Include Paths for Build
        run: |
          echo "Setting up include paths..."
          
          # The kernel already has dt-bindings/bindings, just make sure it's accessible as <bindings/...>
          rm -rf kernel/include/bindings
          
          # Link or copy the kernel's dt-bindings/bindings to include/bindings
          if [ -d "kernel/include/dt-bindings/bindings" ]; then
            cp -r kernel/include/dt-bindings/bindings kernel/include/bindings
            echo "Copied dt-bindings/bindings to include/bindings"
          elif [ -d "kernel/arch/arm64/boot/dts/vendor/bindings" ]; then
            cp -r kernel/arch/arm64/boot/dts/vendor/bindings kernel/include/bindings
            echo "Copied vendor/bindings to include/bindings"
          else
            echo "ERROR: No bindings directory found!"
            exit 1
          fi
          
          echo "Include paths configured"

      - name: Check All Files Are in Correct Place
        run: |
          echo "=== CRITICAL: Checking for qcom,audio-ext-clk.h ==="
          
          echo "Searching for any audio-ext-clk files:"
          find kernel -name "*audio-ext-clk*" -ls 2>/dev/null
          
          echo ""
          echo "Checking include/bindings:"
          if [ -d "kernel/include/bindings" ]; then
            echo "Contents of include/bindings:"
            ls -la kernel/include/bindings/ | head -10
            echo "Looking for .h files:"
            find kernel/include/bindings -name "*.h" | head -10
          fi
          
          echo ""
          echo "Checking vendor/bindings:"
          if [ -d "kernel/arch/arm64/boot/dts/vendor/bindings" ]; then
            echo "Contents of vendor/bindings:"
            ls -la kernel/arch/arm64/boot/dts/vendor/bindings/ | head -10
            echo "Looking for .h files:"
            find kernel/arch/arm64/boot/dts/vendor/bindings -name "*.h" | head -10
          fi
          
          # Check DTS files
          DTS_COUNT=$(find kernel/arch/arm64/boot/dts/vendor -name "*.dts" -o -name "*.dtsi" | wc -l)
          echo "âœ“ Found $DTS_COUNT DTS/DTSI files"
          
          echo "=== Checks complete ==="

      - name: Clone Toolchains
        run: |
          rm -rf mk-clang mk-gcc64 mk-gcc32 tools-lineage || true
          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b -b lineage-20.0 mk-clang
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 -b lineage-19.1 mk-gcc64
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 -b lineage-19.1 mk-gcc32
          git clone https://github.com/LineageOS/android_prebuilts_tools-lineage -b lineage-22.2 tools-lineage

      - name: Clone mkbootimg and avbtool
        run: |
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools/mkbootimg
          git clone https://android.googlesource.com/platform/external/avb tools/avb

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git ccache flex bison libssl-dev bc python3 libelf-dev dwarves

      - name: Build Kernel
        run: |
          BASEDIR=$PWD
          cd $BASEDIR/kernel

          mkdir -p out
          make mrproper
          make ARCH=arm64 O=out pdx234_defconfig

          export PATH=$BASEDIR/mk-clang/bin:$BASEDIR/mk-gcc64/bin:$BASEDIR/mk-gcc32/bin:$PATH
          export LD_LIBRARY_PATH=$BASEDIR/mk-clang/lib

          make ARCH=arm64 \
            O=out \
            LLVM=1 \
            LLVM_IAS=1 \
            CROSS_COMPILE=$BASEDIR/mk-gcc64/bin/aarch64-linux-android- \
            CROSS_COMPILE_ARM32=$BASEDIR/mk-gcc32/bin/arm-linux-androideabi- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            -j$(nproc)

          if [ ! -f out/arch/arm64/boot/Image ]; then
            echo "Error: Kernel Image not found!"
            exit 1
          fi

          echo "Kernel Image built successfully: $(ls -lh out/arch/arm64/boot/Image | awk '{print $5}')"
          echo "Checking for built DTB files..."
          find out/arch/arm64/boot/dts -name "*.dtb" -type f 2>/dev/null | head -5 || echo "No DTB files found"

      - name: Find DTB File
        id: find_dtb
        run: |
          cd kernel
          DTB_FILE=$(find out/arch/arm64/boot/dts/vendor -name "*.dtb" -print -quit)
          if [ -z "$DTB_FILE" ]; then
            echo "Error: No DTB file found in the vendor directory."
            exit 1
          fi
          echo "Found DTB file: $DTB_FILE"
          echo "dtb_path=${{ github.workspace }}/kernel/$DTB_FILE" >> $GITHUB_OUTPUT

      - name: Create Boot Image
        run: |
          ls -la kernel/out/arch/arm64/boot/Image
          python3 tools/mkbootimg/mkbootimg.py \
            --header_version 4 \
            --kernel kernel/out/arch/arm64/boot/Image \
            --pagesize 4096 \
            --dtb ${{ steps.find_dtb.outputs.dtb_path }} \
            --os_version 15.0.0 \
            --os_patch_level 2025-07 \
            --output boot.img

          if [ ! -f boot.img ]; then
            echo "Error: boot.img not created!"
            exit 1
          fi
          echo "Unsigned boot image size: $(ls -lh boot.img | awk '{print $5}')"

      - name: Sign Boot Image with LineageOS Keys
        run: |
          git clone https://github.com/LineageOS/android_build -b lineage-22.2 --depth=1 build_keys
          openssl pkcs8 -inform DER -nocrypt -in build_keys/target/product/security/testkey.pk8 -out testkey.pem
          python3 tools/avb/avbtool.py add_hash_footer \
            --partition_name boot \
            --partition_size $((64 * 1024 * 1024)) \
            --image boot.img \
            --algorithm SHA256_RSA2048 \
            --key testkey.pem
          echo "Signed boot image size: $(ls -lh boot.img | awk '{print $5}')"
          python3 tools/avb/avbtool.py info_image --image boot.img

      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel/out/arch/arm64/boot/Image

      - name: Upload Boot Image
        uses: actions/upload-artifact@v4
        with:
          name: boot-image
          path: boot.img

      - name: Upload DTB/DTBO if exists
        uses: actions/upload-artifact@v4
        with:
          name: dtb-files
          path: |
            kernel/out/arch/arm64/boot/dts/**/*.dtb
            kernel/out/arch/arm64/boot/dtbo.img
          if-no-files-found: ignore

      - name: Upload Kernel Modules
        uses: actions/upload-artifact@v4
        with:
          name: kernel-modules
          path: |
            kernel/out/**/*.ko
          if-no-files-found: ignore

      - name: Upload Build Info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build_info.txt
