name: Sony SM8550 GKI Kernel Build (5.15)
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      kernelsu_variant:
        description: 'KernelSU Variant'
        required: true
        type: choice
        options:
          - 'Official'
          - 'Next'
          - 'MKSU'
          - 'SukiSU'
        default: 'Official'
      kernelsu_branch:
        description: 'KernelSU Branch'
        required: true
        type: choice
        options:
          - 'Stable(标准)'
          - 'Dev(开发)'
        default: 'Stable(标准)'
      use_susfs:
        description: 'Enable SUSFS'
        required: true
        type: boolean
        default: true
      use_zram:
        description: 'Enable ZRAM optimizations'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: 'Enable KPM patches'
        required: true
        type: boolean
        default: true
      build_modules:
        description: 'Build device modules'
        required: true
        type: boolean
        default: false
      custom_version:
        description: 'Custom version string (optional)'
        required: false
        type: string

jobs:
  build-sony-kernel:
    runs-on: ubuntu-latest
    env:
      KERNEL_VERSION: "5.15"
      KERNEL_SUBLEVEL: "185"
      ANDROID_VERSION: "android13"
      OS_PATCH_LEVEL: "2024-12"  # Adjust based on your needs
      CONFIG: "sony-sm8550-5.15"
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          verbose: 'true'

      - name: Setup Build Environment
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y \
            bc bison build-essential ccache curl flex g++-multilib \
            gcc-multilib git gnupg gperf imagemagick lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev \
            libssl-dev libxml2 libxml2-utils lzop pngcrush rsync \
            schedtool squashfs-tools xsltproc zip zlib1g-dev \
            python3 python3-pip clang lld libelf-dev

      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          ccache --version
          ccache --max-size=5G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: sony-sm8550-5.15-ccache-${{ github.sha }}
          restore-keys: |
            sony-sm8550-5.15-ccache-

      - name: Clone Toolchains
        run: |
          # Clone Google's GKI build tools for Android 13
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2023
          
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
          
          # Clone clang for kernel compilation
          git clone https://gitlab.com/ThankYouMario/android_prebuilts_clang-standalone -b 17 --depth=1 clang

      - name: Set Environment Variables
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "CLANG_PATH=$GITHUB_WORKSPACE/clang/bin" >> $GITHUB_ENV

      - name: Clone Kernel and Dependencies
        run: |
          # Clone Sony kernel
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550.git \
            -b lineage-22.2 --depth=1 kernel
          
          # Clone modules
          if [ "${{ inputs.build_modules }}" = "true" ]; then
            git clone https://github.com/LineageOS/android_kernel_sony_sm8550-modules.git \
              --depth=1 modules
          fi
          
          # Clone AnyKernel3
          git clone https://github.com/osm0sis/AnyKernel3.git -b master AnyKernel3
          
          # Clone SUSFS patches for 5.15
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-android13-5.15 susfs4ksu
          
          # Clone additional patches
          git clone https://github.com/Tools-cx-app/kernel_patches.git
          git clone https://github.com/ShirkNeko/SukiSU_patch.git

      - name: Setup KernelSU
        run: |
          cd kernel
          
          # Determine branch based on input
          case "${{ inputs.kernelsu_branch }}" in
            "Stable(标准)")
              BRANCH="-s susfs-main"
              ;;
            "Dev(开发)")
              case "${{ inputs.kernelsu_variant }}" in
                "Official" | "MKSU") BRANCH="-s main" ;;
                "Next") BRANCH="-s next-susfs-dev" ;;
                "SukiSU") BRANCH="-s susfs-test" ;;
                *) 
                  echo "Error: Undefined variant"
                  exit 1
                  ;;
              esac
              ;;
          esac
          
          # Add KernelSU based on variant
          case "${{ inputs.kernelsu_variant }}" in
            "Official")
              echo "Adding Official KernelSU..."
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH
              ;;
            "Next")
              echo "Adding KernelSU Next..."
              curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash $BRANCH
              ;;
            "MKSU")
              echo "Adding MKSU..."
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH
              ;;
            "SukiSU")
              echo "Adding SukiSU..."
              curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH
              ;;
          esac

      - name: Apply SUSFS Patches
        if: ${{ inputs.use_susfs }}
        run: |
          cd kernel
          
          echo "Applying SUSFS patches for Android 13 - 5.15..."
          
          # Copy SUSFS files
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          
          # Apply variant-specific SUSFS patches
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "Applying SUSFS patches for Official KernelSU..."
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying SUSFS patches for KernelSU-Next..."
            cd ./KernelSU-Next
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "Applying SUSFS patches for MKSU..."
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            
            # Apply MKSU specific patches
            cp ../../kernel_patches/mksu/mksu_susfs.patch ./
            patch -p1 < mksu_susfs.patch || true
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying SUSFS patches for SukiSU..."
            cd ./KernelSU
            cd ..
          fi
          
          # Apply main SUSFS patch
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-android13-5.15.patch || true
          
          # Fix for older 5.15 kernels if needed
          if [ $KERNEL_SUBLEVEL -lt 123 ]; then
            echo 'Applying 5.15 legacy fix...'
            curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/legacy/fix_5.15.legacy -o fix_5.15.legacy.patch
            patch -p1 < fix_5.15.legacy.patch || true
          fi

      - name: Apply Additional Patches
        run: |
          cd kernel
          
          # Apply hooks patches based on variant
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch || true
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying hooks for SukiSU..."
            cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch || true
          fi
          
          # Apply hide stuff patch
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch || true

      - name: Apply ZRAM Optimizations
        if: ${{ inputs.use_zram }}
        run: |
          cd kernel
          
          # Copy LZ4K sources
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./lib/
          
          # Apply LZ4KD patches for 5.15
          if [ -f "../SukiSU_patch/other/zram/zram_patch/5.15/lz4kd.patch" ]; then
            cp ../SukiSU_patch/other/zram/zram_patch/5.15/lz4kd.patch ./
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          
          if [ -f "../SukiSU_patch/other/zram/zram_patch/5.15/lz4k_oplus.patch" ]; then
            cp ../SukiSU_patch/other/zram/zram_patch/5.15/lz4k_oplus.patch ./
            patch -p1 -F 3 < lz4k_oplus.patch || true
          fi

      - name: Configure Kernel
        run: |
          cd kernel
          
          # Start with Sony's GKI defconfig
          make ARCH=arm64 gki_defconfig
          
          # Add KernelSU configuration
          echo "CONFIG_KSU=y" >> arch/arm64/configs/gki_defconfig
          
          # Add variant-specific configs
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "CONFIG_KSU_KPROBES_HOOK=n" >> arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> arch/arm64/configs/gki_defconfig
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "CONFIG_KPM=y" >> arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> arch/arm64/configs/gki_defconfig
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> arch/arm64/configs/gki_defconfig
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> arch/arm64/configs/gki_defconfig
          fi
          
          # Add SUSFS configs if enabled
          if [ "${{ inputs.use_susfs }}" = "true" ]; then
            cat >> arch/arm64/configs/gki_defconfig << EOF
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          EOF
          fi
          
          # Add additional configs
          cat >> arch/arm64/configs/gki_defconfig << EOF
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF
          
          # Add ZRAM configs if enabled
          if [ "${{ inputs.use_zram }}" = "true" ]; then
            cat >> arch/arm64/configs/gki_defconfig << EOF
          CONFIG_ZSMALLOC=y
          CONFIG_ZRAM=y
          CONFIG_CRYPTO_LZO=y
          CONFIG_CRYPTO_LZ4HC=y
          CONFIG_CRYPTO_LZ4K=y
          CONFIG_CRYPTO_LZ4KD=y
          CONFIG_CRYPTO_842=y
          CONFIG_CRYPTO_LZ4K_OPLUS=y
          CONFIG_ZRAM_WRITEBACK=y
          CONFIG_ZRAM_DEF_COMP_LZ4KD=y
          EOF
          fi
          
          # Set custom version if provided
          if [ ! -z "${{ inputs.custom_version }}" ]; then
            sed -i "/^CONFIG_LOCALVERSION=/c\CONFIG_LOCALVERSION=\"-${{ inputs.custom_version }}\"" arch/arm64/configs/gki_defconfig
          else
            sed -i "/^CONFIG_LOCALVERSION=/c\CONFIG_LOCALVERSION=\"-Sony-SM8550-KSU\"" arch/arm64/configs/gki_defconfig
          fi
          
          # Regenerate config
          make ARCH=arm64 gki_defconfig

      - name: Build Kernel
        run: |
          cd kernel
          
          # Setup build environment with increased stack frame size
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH=$CLANG_PATH:$PATH
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
          export CC="ccache clang"
          export CXX="ccache clang++"
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export STRIP=llvm-strip
          
          # Add global stack frame size limit increase
          export KCFLAGS="-Wframe-larger-than=8000"
          export KCPPFLAGS="-Wframe-larger-than=8000"
          
          echo "Building kernel with increased stack frame size limit (8000 bytes)..."
          
          # Build kernel
          make -j$(nproc) \
            ARCH=arm64 \
            CC="ccache clang" \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="-Wframe-larger-than=8000" \
            KCPPFLAGS="-Wframe-larger-than=8000" \
            Image Image.gz dtbs
          
          # Show ccache stats
          ccache --show-stats

      - name: Patch Image for KPM (SukiSU only)
        if: ${{ inputs.use_kpm && inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          cd kernel/arch/arm64/boot
          
          echo "Patching Image file for KPM..."
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/refs/heads/main/kpm/patch_linux" -o patch
          chmod 777 patch
          ./patch
          rm -rf Image
          mv oImage Image
          
          # Recreate Image.gz
          gzip -n -k -f -9 ./Image > ./Image.gz

      - name: Build Modules
        if: ${{ inputs.build_modules }}
        run: |
          cd kernel
          
          # Build modules with increased stack frame size
          export ARCH=arm64
          export PATH=$CLANG_PATH:$PATH
          export CC="ccache clang"
          export LLVM=1
          export LLVM_IAS=1
          export KCFLAGS="-Wframe-larger-than=8000"
          export KCPPFLAGS="-Wframe-larger-than=8000"
          
          make -j$(nproc) \
            KCFLAGS="-Wframe-larger-than=8000" \
            KCPPFLAGS="-Wframe-larger-than=8000" \
            modules
          
          # Install modules to temporary directory
          make INSTALL_MOD_PATH=../modules_out modules_install
          
          # Strip modules
          find ../modules_out -name "*.ko" -exec $STRIP --strip-debug {} \;

      - name: Create Boot Images
        run: |
          cd kernel/arch/arm64/boot
          
          # Create different compression formats
          if [ ! -f Image.gz ]; then
            gzip -n -k -f -9 ./Image > ./Image.gz
          fi
          
          if [ ! -f Image.lz4 ]; then
            lz4 -f -12 --favor-decSpeed ./Image ./Image.lz4
          fi
          
          # Create boot images
          echo "Creating boot images..."
          
          # Boot.img with uncompressed kernel
          $MKBOOTIMG \
            --header_version 4 \
            --kernel Image \
            --output boot.img \
            --os_version 13.0.0 \
            --os_patch_level $OS_PATCH_LEVEL
          
          # Boot-gz.img with gzip kernel  
          $MKBOOTIMG \
            --header_version 4 \
            --kernel Image.gz \
            --output boot-gz.img \
            --os_version 13.0.0 \
            --os_patch_level $OS_PATCH_LEVEL
          
          # Boot-lz4.img with lz4 kernel
          $MKBOOTIMG \
            --header_version 4 \
            --kernel Image.lz4 \
            --output boot-lz4.img \
            --os_version 13.0.0 \
            --os_patch_level $OS_PATCH_LEVEL
          
          # Sign boot images (if needed)
          # Note: You might need to adjust or remove signing based on your device
          if [ -f "$AVBTOOL" ]; then
            for img in boot.img boot-gz.img boot-lz4.img; do
              $AVBTOOL add_hash_footer \
                --partition_name boot \
                --partition_size $((64 * 1024 * 1024)) \
                --image $img \
                --algorithm SHA256_RSA2048 || true
            done
          fi
          
          # Move to workspace root
          mv *.img $GITHUB_WORKSPACE/

      - name: Package with AnyKernel3
        run: |
          # Copy kernel images
          cp kernel/arch/arm64/boot/Image AnyKernel3/
          cp kernel/arch/arm64/boot/Image.gz AnyKernel3/
          cp kernel/arch/arm64/boot/Image.lz4 AnyKernel3/ 2>/dev/null || true
          
          # Copy DTBs
          mkdir -p AnyKernel3/dtbs
          find kernel/arch/arm64/boot/dts -name "*.dtb" -exec cp {} AnyKernel3/dtbs/ \; 2>/dev/null || true
          
          # Copy modules if built
          if [ "${{ inputs.build_modules }}" = "true" ] && [ -d "modules_out" ]; then
            mkdir -p AnyKernel3/modules/system/lib/modules
            find modules_out -name "*.ko" -exec cp {} AnyKernel3/modules/system/lib/modules/ \;
          fi
          
          # Configure AnyKernel3 for Sony SM8550
          cat > AnyKernel3/anykernel.sh << 'EOF'
          # AnyKernel3 Ramdisk Mod Script
          # osm0sis @ xda-developers
          
          properties() { '
          kernel.string=Sony SM8550 KernelSU + SUSFS Kernel by @YourName
          do.devicecheck=1
          do.modules=1
          do.systemless=1
          do.cleanup=1
          do.cleanuponabort=0
          device.name1=pdx234
          device.name2=pdx237
          device.name3=yodo
          device.name4=sm8550
          supported.versions=13
          supported.patchlevels=
          '; }
          
          # Shell variables
          block=/dev/block/bootdevice/by-name/boot;
          is_slot_device=1;
          ramdisk_compression=auto;
          patch_vbmeta_flag=auto;
          
          # Import functions/variables and setup patching
          . tools/ak3-core.sh;
          
          # AnyKernel install
          dump_boot;
          
          # Install modules if present
          if [ -d "$home/modules" ]; then
            ui_print "- Installing kernel modules...";
            mount -o rw,remount /system;
            cp -rf $home/modules/* /;
            mount -o ro,remount /system;
          fi;
          
          write_boot;
          EOF
          
          # Create flashable zips
          cd AnyKernel3
          
          # Create main zip with uncompressed kernel
          zip -r9 ../Sony-SM8550-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ inputs.kernelsu_variant }}-$(date +%Y%m%d).zip * \
            -x .git README.md *placeholder Image.gz Image.lz4
          
          # Create gz variant
          rm -f Image
          zip -r9 ../Sony-SM8550-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ inputs.kernelsu_variant }}-gz-$(date +%Y%m%d).zip * \
            -x .git README.md *placeholder Image Image.lz4
          
          # Create lz4 variant if exists
          if [ -f Image.lz4 ]; then
            rm -f Image.gz
            zip -r9 ../Sony-SM8550-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ inputs.kernelsu_variant }}-lz4-$(date +%Y%m%d).zip * \
              -x .git README.md *placeholder Image Image.gz
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Sony-SM8550-KernelSU-${{ inputs.kernelsu_variant }}-${{ github.run_number }}
          path: |
            *.zip
            *.img
            kernel/arch/arm64/boot/Image
            kernel/arch/arm64/boot/Image.gz
            kernel/arch/arm64/boot/Image.lz4

      - name: Create Release
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ inputs.kernelsu_variant }}-${{ github.run_number }}
          name: Sony SM8550 Kernel ${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }} - ${{ inputs.kernelsu_variant }}
          body: |
            ## Sony SM8550 Custom Kernel
            
            **Kernel Version:** ${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}
            **Android Version:** Android 13
            **KernelSU Variant:** ${{ inputs.kernelsu_variant }}
            **SUSFS:** ${{ inputs.use_susfs && 'Enabled' || 'Disabled' }}
            **ZRAM Optimizations:** ${{ inputs.use_zram && 'Enabled' || 'Disabled' }}
            **Build Date:** $(date +%Y-%m-%d)
            
            ### Installation
            1. Flash the zip file via custom recovery (TWRP/OrangeFox)
            2. Or extract and flash boot.img via fastboot
            
            ### Features
            - KernelSU ${{ inputs.kernelsu_variant }} variant
            - SUSFS for enhanced root hiding
            - ZRAM optimizations with LZ4KD compression
            - Built from LineageOS 22.2 sources
            - Increased stack frame size limit for compatibility
            
            ### Device Compatibility
            - Sony Xperia devices with SM8550 chipset
            - Device codenames: pdx234, pdx237, yodo
          files: |
            *.zip
            boot*.img
          draft: false
          prerelease: false
