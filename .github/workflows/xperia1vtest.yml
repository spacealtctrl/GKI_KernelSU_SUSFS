name: Sony SM8550 GKI-Style Kernel Build
permissions:
  contents: write
  actions: write
on:
  workflow_dispatch:
    inputs:
      android_version:
        description: 'Android Version'
        required: true
        type: choice
        options:
          - 'android13'
          - 'android14'
          - 'android15'
        default: 'android13'
      kernelsu_variant:
        description: 'KernelSU Variant'
        required: true
        type: choice
        options:
          - 'Official'
          - 'Next'
          - 'MKSU'
          - 'SukiSU'
        default: 'Official'
      kernelsu_branch:
        description: 'KernelSU Branch'
        required: true
        type: choice
        options:
          - 'Stable(标准)'
          - 'Dev(开发)'
        default: 'Stable(标准)'
      use_susfs:
        description: 'Enable SUSFS'
        required: true
        type: boolean
        default: true
      use_zram:
        description: 'Enable ZRAM optimizations'
        required: true
        type: boolean
        default: true
      use_kmp:
        description: 'Enable KMP patches'
        required: true
        type: boolean
        default: true
      build_modules:
        description: 'Build device modules'
        required: true
        type: boolean
        default: false
      custom_version:
        description: 'Custom version string (optional)'
        required: false
        type: string

jobs:
  build-sony-kernel:
    runs-on: ubuntu-latest
    env:
      KERNEL_VERSION: "5.15"
      KERNEL_SUBLEVEL: "185"
      ANDROID_SECURITY_PATCH: "2025-08"
      VENDOR_SECURITY_PATCH: "2025-04"
      CONFIG: "sony-sm8550-5.15"
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      KCFLAGS: "-Wframe-larger-than=20000"
      KCPPFLAGS: "-Wframe-larger-than=20000"

    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'

      - name: Setup Build Environment
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y \
            bc bison build-essential ccache curl flex g++-multilib \
            gcc-multilib git gnupg gperf imagemagick lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev \
            libssl-dev libxml2 libxml2-utils lzop pngcrush rsync \
            schedtool squashfs-tools xsltproc zip zlib1g-dev \
            python3 python3-pip clang lld libelf-dev dwarves
      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          ccache --version
          ccache --max-size=5G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: sony-sm8550-${{ inputs.android_version }}-5.15-ccache-${{ github.sha }}
          restore-keys: |
            sony-sm8550-${{ inputs.android_version }}-5.15-ccache-
      - name: Cache Toolchains
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            kernel-build-tools
            mkbootimg
            lineage-clang
            lineage-gcc-aarch64
            lineage-gcc-arm
          key: toolchain-${{ runner.os }}-sony-lineage-v1

      - name: Clone Toolchains
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-build-2024
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg
          
          # Clone LineageOS specific toolchains
          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b \
            -b lineage-20.0 --depth=1 lineage-clang || true
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 \
            -b lineage-19.1 --depth=1 lineage-gcc-aarch64 || true
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 \
            -b lineage-19.1 --depth=1 lineage-gcc-arm || true
            
      - name: Set Environment Variables
        run: |
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "CLANG_PATH=$GITHUB_WORKSPACE/lineage-clang/bin" >> $GITHUB_ENV
          echo "GCC_AARCH64_PATH=$GITHUB_WORKSPACE/lineage-gcc-aarch64/bin" >> $GITHUB_ENV
          echo "GCC_ARM_PATH=$GITHUB_WORKSPACE/lineage-gcc-arm/bin" >> $GITHUB_ENV
      - name: Setup Boot Signing Key
        run: |
          openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
      - name: Clone Kernel and Dependencies
        run: |
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550.git \
            -b lineage-22.2 --depth=1 kernel
          if [ "${{ inputs.build_modules }}" = "true" ]; then
            echo "Cloning Sony SM8550 modules repository..."
            git clone https://github.com/LineageOS/android_kernel_sony_sm8550-modules.git \
              --depth=1 modules
          fi
          echo "Cloning Sony SM8550 devicetrees repository..."
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550-devicetrees.git \
            -b lineage-22.2 --depth=1 devicetrees
          ANYKERNEL_BRANCH="gki-2.0"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH" AnyKernel3
          SUSFS_BRANCH="gki-android14-5.15"
          echo "Using SUSFS branch: $SUSFS_BRANCH"
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "$SUSFS_BRANCH" susfs4ksu
          git clone https://github.com/Tools-cx-app/kernel_patches.git
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
      - name: Clone device trees
        run: |
          git clone --depth 1 https://github.com/LineageOS/android_kernel_sony_sm8550-devicetrees.git sm8550-devicetrees || true
          rm -rf kernel/arch/arm64/boot/dts/vendor || true
          ln -s ../../../../../sm8550-devicetrees kernel/arch/arm64/boot/dts/vendor || true
      - name: Setup KernelSU
        run: |
          cd kernel
          case "${{ inputs.kernelsu_branch }}" in
            "Stable(标准)")
              BRANCH="-s susfs-main"
              ;;
            "Dev(开发)")
              case "${{ inputs.kernelsu_variant }}" in
                "Official" | "MKSU") BRANCH="-s main" ;;
                "Next") BRANCH="-s next-susfs-dev" ;;
                "SukiSU") BRANCH="-s susfs-test" ;;
                *)
                  echo "Error: Undefined variant '${{ inputs.kernelsu_variant }}'"
                  exit 1
                  ;;
              esac
              ;;
            *)
              echo "Error: Invalid branch '${{ inputs.kernelsu_branch }}'"
              exit 1
              ;;
          esac
          case "${{ inputs.kernelsu_variant }}" in
            "Official")
              echo "Adding Official KernelSU..."
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH || exit 1
              ;;
            "Next")
              echo "Adding KernelSU Next..."
              curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash $BRANCH || exit 1
              ;;
            "MKSU")
              echo "Adding MKSU..."
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH || exit 1
              ;;
            "SukiSU")
              echo "Adding SukiSU..."
              curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH || exit 1
              ;;
            *)
              echo "Error: Invalid KernelSU variant '${{ inputs.kernelsu_variant }}'"
              exit 1
              ;;
          esac
      - name: Apply SUSFS Patches
        if: ${{ inputs.use_susfs }}
        run: |
          cd kernel
          echo "Applying SUSFS patches for gki-android14-5.15"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-5.15.patch ./
          cp ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "Applying SUSFS patches for Official KernelSU..."
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying SUSFS patches for KernelSU-Next..."
            cd ./KernelSU-Next
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "Applying SUSFS patches for MKSU..."
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            cp ../../kernel_patches/mksu/mksu_susfs.patch ./
            patch -p1 < mksu_susfs.patch || true
            cp ../../kernel_patches/mksu/fix.patch ./
            patch -p1 < fix.patch || true
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying SUSFS patches for SukiSU..."
            cd ./KernelSU
            cd ..
          fi
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-android14-5.15.patch || true
          if [ $KERNEL_SUBLEVEL -lt 123 ]; then
            echo 'Applying 5.15 legacy fix...'
            curl -LSs https://github.com/zzh20188/GKI_KernelSU_SUSFS/raw/refs/heads/legacy/fix_5.15.legacy -o fix_5.15.legacy.patch
            patch -p1 < fix_5.15.legacy.patch || true
          fi
      - name: Apply Additional Patches
        run: |
          cd kernel
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch || true
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying hooks for SukiSU..."
            cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch || true
          fi
          if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            cp ../SukiSU_patch/69_hide_stuff.patch ./
          else
            cp ../kernel_patches/69_hide_stuff.patch ./
          fi
          patch -p1 -F 3 < 69_hide_stuff.patch || true
      - name: Apply ZRAM Optimizations
        if: ${{ inputs.use_zram }}
        run: |
          cd kernel
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./lib/
          if [ -f "../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch" ]; then
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
            echo "Applying lz4kd patch..."
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          if [ -f "../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4k_oplus.patch" ]; then
            cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4k_oplus.patch ./
            echo "Applying lz4k_oplus patch..."
            patch -p1 -F 3 < lz4k_oplus.patch || true
          fi
      - name: Configure Kernel
        run: |
          cd kernel
          make ARCH=arm64 gki_defconfig
          CONFIG_FILE="arch/arm64/configs/gki_defconfig"
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          fi
          if [ "${{ inputs.use_susfs }}" = "true" ]; then
            cat >> "$CONFIG_FILE" << EOF
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          EOF
          fi
          cat >> "$CONFIG_FILE" << EOF
          CONFIG_TMPFS_XATTR=y
          CONFIG_TMPFS_POSIX_ACL=y
          CONFIG_IP_NF_TARGET_TTL=y
          CONFIG_IP6_NF_TARGET_HL=y
          CONFIG_IP6_NF_MATCH_HL=y
          CONFIG_TCP_CONG_ADVANCED=y
          CONFIG_TCP_CONG_BBR=y
          CONFIG_NET_SCH_FQ=y
          CONFIG_TCP_CONG_BIC=n
          CONFIG_TCP_CONG_WESTWOOD=n
          CONFIG_TCP_CONG_HTCP=n
          EOF
          if [ "${{ inputs.use_zram }}" = "true" ]; then
            cat >> "$CONFIG_FILE" << EOF
          CONFIG_ZSMALLOC=y
          CONFIG_ZRAM=y
          CONFIG_CRYPTO_LZO=y
          CONFIG_CRYPTO_LZ4HC=y
          CONFIG_CRYPTO_LZ4K=y
          CONFIG_CRYPTO_LZ4KD=y
          CONFIG_CRYPTO_842=y
          CONFIG_CRYPTO_LZ4K_OPLUS=y
          CONFIG_ZRAM_WRITEBACK=y
          CONFIG_ZRAM_DEF_COMP_LZ4KD=y
          EOF
          fi
          if [ ! -z "${{ inputs.custom_version }}" ]; then
            sed -i "/^CONFIG_LOCALVERSION=/c\CONFIG_LOCALVERSION=\"-${{ inputs.custom_version }}\"" "$CONFIG_FILE"
          else
            sed -i "/^CONFIG_LOCALVERSION=/c\CONFIG_LOCALVERSION=\"-Sony-SM8550-KSU-${{ inputs.android_version }}\"" "$CONFIG_FILE"
          fi
          make ARCH=arm64 gki_defconfig
      - name: Configure Kernel Name and Build Info
        run: |
          cd kernel
          CURRENT_TIME=$(date -u +"%a %b %d %H:%M:%S UTC %Y")
          echo "CURRENT_TIME=$CURRENT_TIME"
          if [ ! -z "${{ inputs.custom_version }}" ]; then
            echo "Using custom version: ${{ inputs.custom_version }}"
            sed -i '$s|echo "\$res"|echo "${{ inputs.custom_version }}"|' ./scripts/setlocalversion
          else
            echo "Using default version with build info"
            sed -i '$s|echo "\$res"|echo "\$res-Sony-SM8550-${{ inputs.android_version }}"|' ./scripts/setlocalversion
          fi
          perl -pi -e "s{UTS_VERSION=\"\\\$\(echo \\\$UTS_VERSION \\\$CONFIG_FLAGS \\\$TIMESTAMP \\| cut -b -\\\$UTS_LEN\)\"}{UTS_VERSION=\"#1 SMP PREEMPT $CURRENT_TIME\"}" ./scripts/mkcompile_h
          sed -i 's/-dirty//' ./scripts/setlocalversion
      - name: Build Kernel
        run: |
          set -e
          set -x
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH=$CLANG_PATH:$GCC_AARCH64_PATH:$GCC_ARM_PATH:$PATH
          export CROSS_COMPILE=$GCC_AARCH64_PATH/aarch64-linux-android-
          export CROSS_COMPILE_ARM32=$GCC_ARM_PATH/arm-linux-androideabi-
          export CC="ccache clang"
          export CXX="ccache clang++"
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export STRIP=llvm-strip
          export KCFLAGS="-Wframe-larger-than=9999"
          export KCPPFLAGS="-Wframe-larger-than=9999"
          echo "Building kernel with increased stack frame size limit (9999 bytes)..."
          make -j$(nproc) \
            ARCH=arm64 \
            CC="ccache clang" \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="-Wframe-larger-than=20000" \
            KCPPFLAGS="-Wframe-larger-than=20000" \
            Image Image.gz dtbs
          ccache --show-stats
          
      - name: Build Modules
        if: ${{ inputs.build_modules }}
        run: |
          cd kernel
          export ARCH=arm64
          export PATH=$CLANG_PATH:$GCC_AARCH64_PATH:$GCC_ARM_PATH:$PATH
          export CROSS_COMPILE=$GCC_AARCH64_PATH/aarch64-linux-android-
          export CROSS_COMPILE_ARM32=$GCC_ARM_PATH/arm-linux-androideabi-
          export CC="ccache clang"
          export CXX="ccache clang++"
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export STRIP=llvm-strip
          export LLVM=1
          export LLVM_IAS=1
          export KCFLAGS="-Wframe-larger-than=20000"
          export KCPPFLAGS="-Wframe-larger-than=20000"
          echo "Building kernel modules..."
          make -j$(nproc) \
            ARCH=arm64 \
            CC="ccache clang" \
            LLVM=1 \
            LLVM_IAS=1 \
            KCFLAGS="-Wframe-larger-than=20000" \
            KCPPFLAGS="-Wframe-larger-than=20000" \
            modules
          make INSTALL_MOD_PATH=../modules_out modules_install
          find ../modules_out -name "*.ko" -exec $STRIP --strip-debug {} \;
          echo "Modules built successfully!"
      - name: Patch Image for KMP (SukiSU only)
        if: ${{ inputs.use_kmp && inputs.kernelsu_variant == 'SukiSU' }}
        run: |
          cd kernel/arch/arm64/boot
          echo "Patching Image file for KMP..."
          chmod +x ../../../../../SukiSU_patch/kmp/patch_linux
          ../../.././SukiSU_patch/kmp/patch_linux
          rm -rf Image
          mv oImage Image
          gzip -n -k -f -9 ./Image > ./Image.gz
      - name: Create Boot Images Directory and Copy Files
        run: |
          echo "Creating bootimgs directory..."
          mkdir -p bootimgs
          cp kernel/arch/arm64/boot/Image bootimgs/
          cp kernel/arch/arm64/boot/Image bootimgs/Image
          if [ ! -f kernel/arch/arm64/boot/Image.gz ]; then
            gzip -n -k -f -9 kernel/arch/arm64/boot/Image > bootimgs/Image.gz
          else
            cp kernel/arch/arm64/boot/Image.gz bootimgs/
          fi
          lz4 -f -12 --favor-decSpeed kernel/arch/arm64/boot/Image bootimgs/Image.lz4
          cp bootimgs/Image ./
          cp bootimgs/Image.gz ./
          cp bootimgs/Image.lz4 ./
      - name: Create Boot Images
        run: |
          cd bootimgs
          echo "Building boot images for ${{ inputs.android_version }}..."
          case "${{ inputs.android_version }}" in
            "android13") OS_VERSION="13.0.0" ;;
            "android14") OS_VERSION="14.0.0" ;;
            "android15") OS_VERSION="15.0.0" ;;
            *) OS_VERSION="13.0.0" ;;
          esac
          echo "Using OS version: $OS_VERSION"
          echo "Using Android security patch: $ANDROID_SECURITY_PATCH"
          $MKBOOTIMG \
            --header_version 4 \
            --kernel Image \
            --output boot.img \
            --os_version "$OS_VERSION" \
            --os_patch_level "$ANDROID_SECURITY_PATCH"
          $AVBTOOL add_hash_footer \
            --partition_name boot \
            --partition_size $((64 * 1024 * 1024)) \
            --image boot.img \
            --algorithm SHA256_RSA2048 \
            --key $BOOT_SIGN_KEY_PATH
          $MKBOOTIMG \
            --header_version 4 \
            --kernel Image.gz \
            --output boot-gz.img \
            --os_version "$OS_VERSION" \
            --os_patch_level "$ANDROID_SECURITY_PATCH"
          $AVBTOOL add_hash_footer \
            --partition_name boot \
            --partition_size $((64 * 1024 * 1024)) \
            --image boot-gz.img \
            --algorithm SHA256_RSA2048 \
            --key $BOOT_SIGN_KEY_PATH
          $MKBOOTIMG \
            --header_version 4 \
            --kernel Image.lz4 \
            --output boot-lz4.img \
            --os_version "$OS_VERSION" \
            --os_patch_level "$ANDROID_SECURITY_PATCH"
          $AVBTOOL add_hash_footer \
            --partition_name boot \
            --partition_size $((64 * 1024 * 1024)) \
            --image boot-lz4.img \
            --algorithm SHA256_RSA2048 \
            --key $BOOT_SIGN_KEY_PATH
          cp boot.img "../${{ inputs.android_version }}-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ env.ANDROID_SECURITY_PATCH }}-boot.img"
          cp boot-gz.img "../${{ inputs.android_version }}-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ env.ANDROID_SECURITY_PATCH }}-boot-gz.img"
          cp boot-lz4.img "../${{ inputs.android_version }}-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ env.ANDROID_SECURITY_PATCH }}-boot-lz4.img"
      - name: Package with AnyKernel3
        run: |
          cp bootimgs/Image AnyKernel3/
          cp bootimgs/Image.gz AnyKernel3/
          cp bootimgs/Image.lz4 AnyKernel3/
          
          # Copy DTBs if they exist
          mkdir -p AnyKernel3/dtbs
          find kernel/arch/arm64/boot/dts -name "*.dtb" -exec cp {} AnyKernel3/dtbs/ \; 2>/dev/null || true
          
          if [ "${{ inputs.build_modules }}" = "true" ] && [ -d "modules_out" ]; then
            echo "Copying kernel modules to AnyKernel3..."
            mkdir -p AnyKernel3/modules/system/lib/modules
            find modules_out -name "*.ko" -exec cp {} AnyKernel3/modules/system/lib/modules/ \;
          fi
          
          cat > AnyKernel3/anykernel.sh << 'EOF'
          # AnyKernel3 Ramdisk Mod Script
          # osm0sis @ xda-developers
          properties() { '
          kernel.string=Sony SM8550 KernelSU + SUSFS Kernel (${{ inputs.android_version }})
          do.devicecheck=1
          do.modules=${{ inputs.build_modules && '1' || '0' }}
          do.systemless=1
          do.cleanup=1
          do.cleanuponabort=0
          device.name1=pdx234
          device.name2=pdx237
          device.name3=yodo
          device.name4=sm8550
          supported.versions=13,14,15
          supported.patchlevels=
          '; }
          # Shell variables
          block=/dev/block/bootdevice/by-name/boot;
          is_slot_device=1;
          ramdisk_compression=auto;
          patch_vbmeta_flag=auto;
          # Import functions/variables and setup patching
          . tools/ak3-core.sh;
          # AnyKernel install
          dump_boot;
          # Install modules if present
          if [ "${{ inputs.build_modules }}" = "true" ] && [ -d "$home/modules" ]; then
            ui_print "- Installing kernel modules...";
            mount -o rw,remount /system;
            cp -rf $home/modules/* /;
            mount -o ro,remount /system;
          fi;
          write_boot;
          EOF
          
          cd AnyKernel3
          ZIP_NAME="${{ inputs.android_version }}-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ env.ANDROID_SECURITY_PATCH }}-AnyKernel3.zip"
          zip -r "../$ZIP_NAME" ./* -x Image.gz Image.lz4
          rm -f Image
          ZIP_NAME_GZ="${{ inputs.android_version }}-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ env.ANDROID_SECURITY_PATCH }}-AnyKernel3-gz.zip"
          zip -r "../$ZIP_NAME_GZ" ./* -x Image Image.lz4
          rm -f Image.gz
          ZIP_NAME_LZ4="${{ inputs.android_version }}-${{ env.KERNEL_VERSION }}.${{ env.KERNEL_SUBLEVEL }}-${{ env.ANDROID_SECURITY_PATCH }}-AnyKernel3-lz4.zip"
          zip -r "../$ZIP_NAME_LZ4" ./* -x Image Image.gz
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Sony-SM8550-Kernel-${{ inputs.android_version }}-${{ github.run_id }}
          path: |
            *.img
            *.zip
            *.CPIO
