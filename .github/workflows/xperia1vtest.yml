name: Sony SM8550 GKI-Style Kernel Build (patched)

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
    inputs:
      android_version:
        description: 'Android Version'
        required: true
        type: choice
        options:
          - 'android15'
          - 'android14'
          - 'android13'
        default: 'android15'
      kernelsu_variant:
        description: 'KernelSU Variant'
        required: true
        type: choice
        options:
          - 'Official'
          - 'Next'
          - 'MKSU'
          - 'SukiSU'
        default: 'Official'
      kernelsu_branch:
        description: 'KernelSU Branch'
        required: true
        type: choice
        options:
          - 'Stable(标准)'
          - 'Dev(开发)'
        default: 'Stable(标准)'
      use_susfs:
        description: 'Enable SUSFS'
        required: true
        type: boolean
        default: true
      use_zram:
        description: 'Enable ZRAM optimizations'
        required: true
        type: boolean
        default: true
      use_kmp:
        description: 'Enable KMP patches'
        required: true
        type: boolean
        default: true
      custom_version:
        description: 'Custom version string (optional)'
        required: false
        type: string

jobs:
  build-sony-kernel:
    runs-on: ubuntu-latest
    env:
      KERNEL_VERSION: "5.15"
      KERNEL_SUBLEVEL: "176"
      ANDROID_SECURITY_PATCH: "2025-08"
      VENDOR_SECURITY_PATCH: "2025-04"
      CONFIG: "sony-sm8550-5.15"
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      KCFLAGS: "-Wframe-larger-than=20000"
      KCPPFLAGS: "-Wframe-larger-than=20000"
      SUSFS_KERNEL_VERSION: "android14-5.15"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Build Environment
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y \
            bc bison build-essential ccache curl flex g++-multilib \
            gcc-multilib git gnupg gperf imagemagick lib32readline-dev \
            lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev \
            libssl-dev libxml2 libxml2-utils lzop pngcrush rsync \
            schedtool squashfs-tools xsltproc zip zlib1g-dev \
            python3 python3-pip clang lld llvm libelf-dev dwarves lz4
          # Create symlinks for LLVM tools if needed (best-effort)
          sudo ln -sf /usr/bin/llvm-ar-* /usr/bin/llvm-ar 2>/dev/null || true
          sudo ln -sf /usr/bin/llvm-nm-* /usr/bin/llvm-nm 2>/dev/null || true
          sudo ln -sf /usr/bin/llvm-objcopy-* /usr/bin/llvm-objcopy 2>/dev/null || true
          sudo ln -sf /usr/bin/llvm-objdump-* /usr/bin/llvm-objdump 2>/dev/null || true
          sudo ln -sf /usr/bin/llvm-strip-* /usr/bin/llvm-strip 2>/dev/null || true
      - name: Configure ccache
        run: |
          mkdir -p ~/.ccache
          ccache --version
          ccache --max-size=5G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: sony-sm8550-${{ inputs.android_version }}-5.15-ccache-${{ github.sha }}
          restore-keys: |
            sony-sm8550-${{ inputs.android_version }}-5.15-ccache-
      - name: Clone Toolchains and Utilities
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          # Use specific release tags for stable toolchains
          git clone $AOSP_MIRROR/toolchain/llvm-project aosp-clang --depth=1 || true
          cd aosp-clang || exit 0
          git checkout 20240409 || true
          cd ..
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools/linux-x86/main/aarch64-linux-android-4.9 --depth=1 aosp-gcc || true
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools --depth 1 kernel-build-tools || true
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg --depth=1 mkbootimg || true
          git clone https://github.com/vmware-tanzu/antidote.git antidote || true
          git clone https://github.com/lineageos/avb avb-tools || true
          # Fallback: also clone platform/external/avb to mirror original layout
          git clone https://android.googlesource.com/platform/external/avb tools/avb || true
      - name: Set Environment Variables
        run: |
          echo "OUT_DIR=$GITHUB_WORKSPACE/out" >> $GITHUB_ENV
          echo "AVBTOOL=$GITHUB_WORKSPACE/tools/avb/avbtool.py" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          AOSP_CLANG_PATH=$(pwd)/aosp-clang
          AOSP_GCC_PATH=$(pwd)/aosp-gcc
          echo "CLANG_PATH=$AOSP_CLANG_PATH/bin" >> $GITHUB_ENV
          echo "GCC_AARCH64_PATH=$AOSP_GCC_PATH/bin" >> $GITHUB_ENV
          echo "GCC_ARM_PATH=$AOSP_GCC_PATH/bin" >> $GITHUB_ENV
          mkdir -p out
      - name: Install Python deps for avbtool
        run: |
          pip3 install --user pyOpenSSL cryptography
      - name: Setup Boot Signing Key
        run: |
          mkdir -p kernel-build-tools/linux-x86/share/avb || true
          openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
      - name: Clone Kernel and Dependencies
        run: |
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550.git \
            -b lineage-22.2 --depth=1 kernel || true
          echo "Cloning Sony SM8550 devicetrees repository..."
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550-devicetrees.git \
            -b lineage-22.2 --depth=1 devicetrees || true
          ANYKERNEL_BRANCH="gki-2.0"
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH" AnyKernel3 || true
          SUSFS_BRANCH="gki-android14-5.15"
          echo "Using SUSFS branch: $SUSFS_BRANCH (for 5.15 kernel)"
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b "$SUSFS_BRANCH" susfs4ksu || true
          git clone https://github.com/Tools-cx-app/kernel_patches.git || true
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git || true
      - name: Setup device trees
        run: |
          rm -rf kernel/arch/arm64/boot/dts/vendor || true
          ln -s ../../../../../devicetrees kernel/arch/arm64/boot/dts/vendor || true
      - name: Setup KernelSU
        run: |
          cd kernel
          case "${{ inputs.kernelsu_branch }}" in
            "Stable(标准)")
              BRANCH="-s susfs-main"
              ;;
            "Dev(开发)")
              case "${{ inputs.kernelsu_variant }}" in
                "Official" | "MKSU") BRANCH="-s main" ;;
                "Next") BRANCH="-s next-susfs-dev" ;;
                "SukiSU") BRANCH="-s susfs-test" ;;
                *)
                  echo "Error: Undefined variant '${{ inputs.kernelsu_variant }}'"
                  exit 1
                  ;;
              esac
              ;;
            *)
              echo "Error: Invalid branch '${{ inputs.kernelsu_branch }}'"
              exit 1
              ;;
          esac
          case "${{ inputs.kernelsu_variant }}" in
            "Official")
              echo "Adding Official KernelSU..."
              curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH || exit 1
              ;;
            "Next")
              echo "Adding KernelSU Next..."
              curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash $BRANCH || exit 1
              ;;
            "MKSU")
              echo "Adding MKSU..."
              curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH || exit 1
              ;;
            "SukiSU")
              echo "Adding SukiSU..."
              curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH || exit 1
              ;;
            *)
              echo "Error: Invalid KernelSU variant '${{ inputs.kernelsu_variant }}'"
              exit 1
              ;;
          esac
      - name: Apply SUSFS Patches (Android 14 patches for 5.15 kernel)
        if: ${{ inputs.use_susfs }}
        run: |
          cd kernel
          echo "Applying SUSFS patches for gki-android14-5.15 (5.15 kernel regardless of Android version)"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-5.15.patch ./ || true
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/ 2>/dev/null || true
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/ 2>/dev/null || true
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "Applying SUSFS patches for Official KernelSU..."
            cd ./KernelSU || true
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./ || true
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "KernelSU-Next already has SUSFS support..."
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "Applying SUSFS patches for MKSU..."
            cd ./KernelSU || true
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./ || true
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            cp ../../kernel_patches/mksu/mksu_susfs.patch ./ || true
            patch -p1 < mksu_susfs.patch || true
            cp ../../kernel_patches/mksu/fix.patch ./ || true
            patch -p1 < fix.patch || true
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "SukiSU already has SUSFS support..."
          fi
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-android14-5.15.patch || true
      - name: Apply Additional Patches
        run: |
          cd kernel
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying hooks for KernelSU-Next..."
            cp ../kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./ || true
            patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch || true
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying hooks for SukiSU..."
            cp ../SukiSU_patch/hooks/syscall_hooks.patch ./ || true
            patch -p1 -F 3 < syscall_hooks.patch || true
          fi
          if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            cp ../SukiSU_patch/69_hide_stuff.patch ./ || true
          else
            cp ../kernel_patches/69_hide_stuff.patch ./ || true
          fi
          patch -p1 -F 3 < 69_hide_stuff.patch || true
      - name: Apply ZRAM Optimizations
        if: ${{ inputs.use_zram }}
        run: |
          cd kernel
          echo "Applying ZRAM optimizations for 5.15 kernel..."
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/ 2>/dev/null || true
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib/ 2>/dev/null || true
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/ 2>/dev/null || true
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./lib/ 2>/dev/null || true
          if [ -f "../SukiSU_patch/other/zram/zram_patch/5.15/lz4kd.patch" ]; then
            cp ../SukiSU_patch/other/zram/zram_patch/5.15/lz4kd.patch ./ || true
            echo "Applying lz4kd patch for 5.15..."
            patch -p1 -F 3 < lz4kd.patch || true
          fi
          if [ -f "../SukiSU_patch/other/zram/zram_patch/5.15/lz4k_oplus.patch" ]; then
            cp ../SukiSU_patch/other/zram/zram_patch/5.15/lz4k_oplus.patch ./ || true
            echo "Applying lz4k_oplus patch for 5.15..."
            patch -p1 -F 3 < lz4k_oplus.patch || true
          fi
      - name: Build Kernel (mrproper -> defconfig -> build into OUT_DIR)
        run: |
          set -e
          set -x
          cd kernel
          # Ensure OUT_DIR exists and is used for all build artifacts
          export OUT_DIR=$GITHUB_WORKSPACE/out
          mkdir -p "$OUT_DIR"
          # Clean the source tree first
          make ARCH=arm64 mrproper
          # Generate gki_defconfig into OUT_DIR
          make ARCH=arm64 O=$OUT_DIR gki_defconfig
          # Edit the defconfig in the OUT_DIR (safe: doesn't touch tree)
          CONFIG_FILE="$OUT_DIR/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_STACKPROTECTOR_STRONG=y" >> "$CONFIG_FILE"
          echo "CONFIG_CC_HAS_STACKPROTECTOR_NONE=y" >> "$CONFIG_FILE"
          echo "# CONFIG_STACKPROTECTOR_PER_TASK is not set" >> "$CONFIG_FILE"
          echo "# CONFIG_DEBUG_INFO_BTF is not set" >> "$CONFIG_FILE"
          echo "# CONFIG_BPF_LSM is not set" >> "$CONFIG_FILE"
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          fi
          if [ "${{ inputs.use_susfs }}" = "true" ]; then
            cat >> "$CONFIG_FILE" << EOF
              CONFIG_KSU_SUSFS=y
              CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
              CONFIG_KSU_SUSFS_SUS_PATH=y
              CONFIG_KSU_SUSFS_SUS_MOUNT=y
              CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
              CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
              CONFIG_KSU_SUSFS_SUS_KSTAT=y
              CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
              CONFIG_KSU_SUSFS_TRY_UMOUNT=y
              CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
              CONFIG_KSU_SUSFS_SPOOF_UNAME=y
              CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
              CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
            EOF
          fi
          if [ "${{ inputs.use_zram }}" = "true" ]; then
            cat >> "$CONFIG_FILE" << EOF
              CONFIG_ZSMALLOC=y
              CONFIG_ZRAM=y
              CONFIG_CRYPTO_LZO=y
              CONFIG_CRYPTO_LZ4HC=y
              CONFIG_CRYPTO_LZ4K=y
              CONFIG_CRYPTO_LZ4KD=y
              CONFIG_CRYPTO_842=y
              CONFIG_CRYPTO_LZ4K_OPLUS=y
              CONFIG_ZRAM_WRITEBACK=y
              CONFIG_ZRAM_DEF_COMP_LZ4KD=y
            EOF
          fi
          # Install defconfig into .config for the build
          make ARCH=arm64 O=$OUT_DIR defconfig
          # Export toolchains BEFORE make
          export AOSP_CLANG_PATH=$(realpath ../aosp-clang)
          export AOSP_GCC_PATH=$(realpath ../aosp-gcc)
          export PATH=$AOSP_CLANG_PATH/bin:$AOSP_GCC_PATH/bin:$PATH
          export LD_LIBRARY_PATH=$AOSP_CLANG_PATH/lib:$LD_LIBRARY_PATH
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=$AOSP_GCC_PATH/bin/aarch64-linux-android-
          export CROSS_COMPILE_ARM32=$AOSP_GCC_PATH/bin/arm-linux-androideabi-
          export CROSS_COMPILE_COMPAT=$AOSP_GCC_PATH/bin/arm-linux-androideabi-
          export KBUILD_BUILD_USER=github
          export KBUILD_BUILD_HOST=actions
          export CC="ccache clang"
          export CXX="ccache clang++"
          export LD="ld.lld"
          export AR="llvm-ar"
          export NM="llvm-nm"
          export OBJCOPY="llvm-objcopy"
          export OBJDUMP="llvm-objdump"
          export STRIP="llvm-strip"
          export READELF="llvm-readelf"
          export HOST_CC="ccache clang"
          export HOST_LD="ld.lld"
          export LLVM=1
          export LLVM_IAS=1
          export KCFLAGS="-Wframe-larger-than=20000 -fno-stack-protector"
          export KCPPFLAGS="-Wframe-larger-than=20000"
          echo "Building 5.15 kernel for ${{ inputs.android_version }} into O=$OUT_DIR ..."
          make ARCH=arm64 \
            O=$OUT_DIR \
            -j$(nproc --all) \
            Image \
            dtbo.img \
            modules
      - name: Build and Sign Boot Image
        run: |
          set -e
          set -x
          
          BOOT_IMAGE_NAME="boot-${{ inputs.kernelsu_variant }}.img"
          # Create the boot image using mkbootimg
          python3 "$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" \
            --header_version 4 \
            --kernel "$GITHUB_WORKSPACE/out/arch/arm64/boot/Image" \
            --output "$GITHUB_WORKSPACE/out/$BOOT_IMAGE_NAME"
          # Add hash footer and sign the boot image with avbtool
          python3 "$GITHUB_WORKSPACE/tools/avb/avbtool.py" \
            add_hash_footer \
            --partition_name boot \
            --partition_size $((64 * 1024 * 1024)) \
            --image "$GITHUB_WORKSPACE/out/$BOOT_IMAGE_NAME" \
            --algorithm SHA256_RSA2048 \
            --key "$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: SM8550-GKI-Kernel-
          path: AnyKernel3/SM8550-GKI-Kernel-${{ inputs.kernelsu_variant }}-${{ inputs.android_version }}-${{ inputs.custom_version }}-${{ env.KERNEL_VERSION }}-${{ env.KERNEL_SUBLEVEL }}.zip
