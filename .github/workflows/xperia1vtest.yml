name: Simple Android Kernel Build
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: LineageOS/android_kernel_sony_sm8550
          fetch-depth: 0
          
      - name: Clone Toolchains
        run: |
          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b -b lineage-20.0 mk-clang
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 -b lineage-19.1 mk-gcc64
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 -b lineage-19.1 mk-gcc32
          
      - name: Clone mkbootimg and avbtool
        run: |
          # Clone mkbootimg tools
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools/mkbootimg
          # Clone avb tools exactly as specified
          git clone https://android.googlesource.com/platform/external/avb tools/avb
          
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git ccache flex bison libssl-dev bc python3 libelf-dev dwarves
          
      - name: Build Kernel
        run: |
          # Set up environment
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH=${{ github.workspace }}/mk-clang/bin:${{ github.workspace }}/mk-gcc64/bin:${{ github.workspace }}/mk-gcc32/bin:$PATH
          export LD_LIBRARY_PATH=${{ github.workspace }}/mk-clang/lib
          
          # Create output directory
          mkdir -p out
          
          # Clean build environment
          make ARCH=arm64 mrproper
          
          # Configure kernel
          make ARCH=arm64 O=out gki_defconfig
          
          # Build kernel with Clang and LLVM tools as specified
          make ARCH=arm64 \
            O=out \
            CC="ccache clang" \
            HOST_CC="ccache clang" \
            LD="ld.lld" \
            HOST_LD="ld.lld" \
            OBJDUMP="llvm-objdump" \
            OBJCOPY="llvm-objcopy" \
            STRIP="llvm-strip" \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=${{ github.workspace }}/mk-gcc64/bin/aarch64-linux-android- \
            CROSS_COMPILE_ARM32=${{ github.workspace }}/mk-gcc32/bin/arm-linux-androideabi- \
            KCFLAGS="-Wframe-larger-than=15000" \
            -j$(nproc)
          
          # Verify kernel was built
          if [ ! -f out/arch/arm64/boot/Image ]; then
            echo "Error: Kernel Image not found!"
            exit 1
          fi
          
          echo "Kernel Image size: $(ls -lh out/arch/arm64/boot/Image | awk '{print $5}')"
          
      - name: Create Boot Image
        run: |
          # Check kernel image exists
          ls -la ./out/arch/arm64/boot/Image
          
          # Create boot.img using mkbootimg (Android 15 style with header_version 4)
          # Following exact instruction format
          python3 tools/mkbootimg/mkbootimg.py \
            --header_version 4 \
            --kernel ./out/arch/arm64/boot/Image \
            --output boot.img
          
          # Verify boot image was created
          if [ ! -f boot.img ]; then
            echo "Error: boot.img not created!"
            exit 1
          fi
          
          echo "Unsigned boot image size: $(ls -lh boot.img | awk '{print $5}')"
          
      - name: Sign Boot Image
        run: |
          # Generate a test signing key for AVB
          mkdir -p keys
          openssl genrsa -out keys/private_key.pem 2048
          
          # Sign the boot image with AVB - exactly as in instructions
          # This modifies boot.img in place
          python3 tools/avb/avbtool.py add_hash_footer \
            --partition_name boot \
            --partition_size $((64 * 1024 * 1024)) \
            --image boot.img \
            --algorithm SHA256_RSA2048 \
            --key keys/private_key.pem
          
          # Verify final boot image
          echo "Signed boot image size: $(ls -lh boot.img | awk '{print $5}')"
          
          # Verify AVB signature
          python3 tools/avb/avbtool.py info_image --image boot.img
          
      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: out/arch/arm64/boot/Image
          
      - name: Upload Boot Image
        uses: actions/upload-artifact@v4
        with:
          name: boot-image
          path: boot.img
          
      - name: Upload DTB/DTBO if exists
        uses: actions/upload-artifact@v4
        with:
          name: dtb-files
          path: |
            out/arch/arm64/boot/dts/**/*.dtb
            out/arch/arm64/boot/dtbo.img
          if-no-files-found: ignore
          
      - name: Upload Kernel Modules
        uses: actions/upload-artifact@v4
        with:
          name: kernel-modules
          path: |
            out/**/*.ko
          if-no-files-found: ignore
          
      - name: Create Release Info
        run: |
          echo "# Build Information" > build_info.txt
          echo "Date: $(date)" >> build_info.txt
          echo "Kernel Version: $(cat out/include/config/kernel.release)" >> build_info.txt
          echo "" >> build_info.txt
          echo "## File Sizes:" >> build_info.txt
          echo "- Kernel Image: $(ls -lh out/arch/arm64/boot/Image | awk '{print $5}')" >> build_info.txt
          echo "- Boot Image: $(ls -lh boot.img | awk '{print $5}')" >> build_info.txt
          echo "" >> build_info.txt
          echo "## Build Configuration:" >> build_info.txt
          echo "- Architecture: arm64" >> build_info.txt
          echo "- Toolchain: Clang + LLVM" >> build_info.txt
          echo "- Config: gki_defconfig" >> build_info.txt
          
      - name: Upload Build Info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build_info.txt
