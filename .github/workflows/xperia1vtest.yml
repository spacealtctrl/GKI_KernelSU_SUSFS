name: Simple Android Kernel Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Kernel Source
        run: |
          rm -rf kernel || true
          git clone https://github.com/spacealtctrl/android_kernel_sony_sm8550 \
            -b lineage-22.2 kernel

      - name: Clone Devicetrees
        run: |
          rm -rf temp-devicetrees || true
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550-devicetrees.git \
            -b lineage-22.2 --depth=1 temp-devicetrees

          # Merge kernel dt-bindings into devicetree bindings
          cp -r kernel/include/dt-bindings/* temp-devicetrees/bindings/

          # Move everything into kernel vendor directory
          rm -rf kernel/arch/arm64/boot/dts/vendor
          mv temp-devicetrees kernel/arch/arm64/boot/dts/vendor

          # Verify critical header exists
          if [ ! -f kernel/arch/arm64/boot/dts/vendor/bindings/clock/qcom,gcc-kalama.h ]; then
            echo "Error: dt-bindings header not found in vendor!"
            exit 1
          fi
          echo "All DTS and bindings are in place."

      - name: Clone Toolchains
        run: |
          rm -rf mk-clang mk-gcc64 mk-gcc32 tools-lineage || true
          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b -b lineage-20.0 mk-clang
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 -b lineage-19.1 mk-gcc64
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 -b lineage-19.1 mk-gcc32
          git clone https://github.com/LineageOS/android_prebuilts_tools-lineage -b lineage-22.2 tools-lineage

      - name: Clone mkbootimg and avbtool
        run: |
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools/mkbootimg
          git clone https://android.googlesource.com/platform/external/avb tools/avb

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git ccache flex bison libssl-dev bc python3 libelf-dev dwarves

      - name: Build Kernel
        run: |
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH=${{ github.workspace }}/mk-clang/bin:${{ github.workspace }}/mk-gcc64/bin:${{ github.workspace }}/mk-gcc32/bin:$PATH
          export LD_LIBRARY_PATH=${{ github.workspace }}/mk-clang/lib

          export DTC_INCLUDE="-I include -I arch/arm64/boot/dts/vendor"
          export DTC_FLAGS="-I arch/arm64/boot/dts/vendor"

          mkdir -p out
          make ARCH=arm64 mrproper
          make ARCH=arm64 O=out pdx234_defconfig

          make ARCH=arm64 \
            O=out \
            CC="ccache clang" \
            HOST_CC="ccache clang" \
            LD="ld.lld" \
            HOST_LD="ld.lld" \
            OBJDUMP="llvm-objdump" \
            OBJCOPY="llvm-objcopy" \
            STRIP="llvm-strip" \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=${{ github.workspace }}/mk-gcc64/bin/aarch64-linux-android- \
            CROSS_COMPILE_ARM32=${{ github.workspace }}/mk-gcc32/bin/arm-linux-androideabi- \
            KCFLAGS="-Wframe-larger-than=15000" \
            LLVM_IAS=1 \
            DTC_INCLUDE="-I include -I arch/arm64/boot/dts/vendor" \
            DTC_FLAGS="-I arch/arm64/boot/dts/vendor" \
            -j$(nproc)

          if [ ! -f out/arch/arm64/boot/Image ]; then
            echo "Error: Kernel Image not found!"
            exit 1
          fi

          echo "Kernel Image size: $(ls -lh out/arch/arm64/boot/Image | awk '{print $5}')"
          echo "Checking for built DTB files..."
          find out/arch/arm64/boot/dts -name "*.dtb" -type f 2>/dev/null | head -5 || echo "No DTB files found"
