name: Simple Android Kernel Build

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      - name: Setup Job
        run: |
          echo "Starting kernel build job..."
          echo "Runner: $(uname -a)"
          echo "Available cores: $(nproc)"
          echo "Memory: $(free -h)"

      - name: Checkout Kernel Source
        run: |
          rm -rf kernel || true
          git clone https://github.com/spacealtctrl/android_kernel_sony_sm8550 \
            -b lineage-22.2 kernel
          echo "Kernel source cloned successfully"

      - name: Clone Devicetrees
        run: |
          rm -rf devicetrees-temp || true
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550-devicetrees.git \
            -b lineage-22.2 --depth=1 devicetrees-temp
          echo "Devicetrees cloned successfully"

      - name: Copy Devicetrees to Kernel
        run: |
          # Remove old vendor directory if exists
          rm -rf kernel/arch/arm64/boot/dts/vendor
          
          # Copy all devicetree files EXCEPT bindings directory
          mkdir -p kernel/arch/arm64/boot/dts/vendor
          find devicetrees-temp -maxdepth 1 -mindepth 1 ! -name bindings -exec cp -r {} kernel/arch/arm64/boot/dts/vendor/ \;
          
          echo "Devicetrees copied to kernel vendor directory"
          ls -la kernel/arch/arm64/boot/dts/vendor/ | head -20

      - name: Clone/Extract Bindings
        run: |
          # Bindings are in devicetrees-temp/bindings
          echo "Listing bindings from devicetrees repository:"
          ls -la devicetrees-temp/bindings/ | head -20
          echo "Total binding files: $(find devicetrees-temp/bindings -name "*.h" | wc -l)"

      - name: Copy Bindings to Kernel
        run: |
          echo "=== MERGING ALL BINDINGS ==="
          
          # FORCE COPY 1: Merge into kernel/include/dt-bindings/bindings/
          echo "Copying to dt-bindings/bindings..."
          # Remove existing file/symlink if it exists
          rm -rf kernel/include/dt-bindings/bindings
          mkdir -p kernel/include/dt-bindings/bindings
          cp -rf devicetrees-temp/bindings/* kernel/include/dt-bindings/bindings/ 2>/dev/null || true
          echo "Files in dt-bindings/bindings: $(find kernel/include/dt-bindings/bindings -name "*.h" | wc -l)"
          
          # FORCE COPY 2: Create direct bindings path
          echo "Copying to include/bindings..."
          rm -rf kernel/include/bindings
          mkdir -p kernel/include/bindings
          cp -rf devicetrees-temp/bindings/* kernel/include/bindings/ 2>/dev/null || true
          echo "Files in include/bindings: $(find kernel/include/bindings -name "*.h" | wc -l)"
          
          # FORCE COPY 3: Copy to vendor dts location
          echo "Copying to vendor/bindings..."
          rm -rf kernel/arch/arm64/boot/dts/vendor/bindings
          mkdir -p kernel/arch/arm64/boot/dts/vendor/bindings
          cp -rf devicetrees-temp/bindings/* kernel/arch/arm64/boot/dts/vendor/bindings/ 2>/dev/null || true
          echo "Files in vendor/bindings: $(find kernel/arch/arm64/boot/dts/vendor/bindings -name "*.h" | wc -l)"
          
          # FORCE COPY 4: Also merge kernel's existing dt-bindings INTO the bindings folders
          echo "Merging kernel's existing dt-bindings..."
          if [ -d "kernel/include/dt-bindings" ]; then
            # Copy any existing kernel dt-bindings to all binding locations
            find kernel/include/dt-bindings -maxdepth 1 -name "*.h" -exec cp {} kernel/include/bindings/ \; 2>/dev/null || true
            find kernel/include/dt-bindings -maxdepth 1 -name "*.h" -exec cp {} kernel/include/dt-bindings/bindings/ \; 2>/dev/null || true
            find kernel/include/dt-bindings -maxdepth 1 -name "*.h" -exec cp {} kernel/arch/arm64/boot/dts/vendor/bindings/ \; 2>/dev/null || true
            
            # Also copy subdirectories from dt-bindings
            find kernel/include/dt-bindings -mindepth 1 -maxdepth 1 -type d ! -name bindings -exec cp -r {} kernel/include/bindings/ \; 2>/dev/null || true
            find kernel/include/dt-bindings -mindepth 1 -maxdepth 1 -type d ! -name bindings -exec cp -r {} kernel/include/dt-bindings/bindings/ \; 2>/dev/null || true
            find kernel/include/dt-bindings -mindepth 1 -maxdepth 1 -type d ! -name bindings -exec cp -r {} kernel/arch/arm64/boot/dts/vendor/bindings/ \; 2>/dev/null || true
          fi
          
          # Clean up temp directory
          rm -rf devicetrees-temp
          
          echo "=== ALL BINDINGS MERGED ==="

      - name: Check All Files Are in Correct Place
        run: |
          echo "=== Checking file structure ==="
          
          # Check 1: Vendor DTS directory exists
          if [ ! -d "kernel/arch/arm64/boot/dts/vendor" ]; then
            echo "ERROR: Vendor DTS directory not found!"
            exit 1
          fi
          echo "✓ Vendor DTS directory exists"
          
          # Check 2: Check for actual DTS files
          DTS_COUNT=$(find kernel/arch/arm64/boot/dts/vendor -name "*.dts" -o -name "*.dtsi" | wc -l)
          if [ "$DTS_COUNT" -eq 0 ]; then
            echo "ERROR: No DTS/DTSI files found in vendor directory!"
            exit 1
          fi
          echo "✓ Found $DTS_COUNT DTS/DTSI files"
          
          # Check 3: Check bindings in dt-bindings/bindings
          if [ ! -d "kernel/include/dt-bindings/bindings" ]; then
            echo "ERROR: dt-bindings/bindings directory not found!"
            exit 1
          fi
          BINDINGS_COUNT=$(find kernel/include/dt-bindings/bindings -name "*.h" | wc -l)
          echo "✓ dt-bindings/bindings directory exists with $BINDINGS_COUNT header files"
          
          # Check 4: Check bindings in include/bindings
          if [ ! -d "kernel/include/bindings" ]; then
            echo "ERROR: include/bindings directory not found!"
            exit 1
          fi
          BINDINGS_COUNT2=$(find kernel/include/bindings -name "*.h" | wc -l)
          echo "✓ include/bindings directory exists with $BINDINGS_COUNT2 header files"
          
          # Check 5: Check for specific required binding file
          echo "Checking for qcom,audio-ext-clk.h in all locations..."
          find kernel -name "qcom,audio-ext-clk.h" 2>/dev/null || echo "WARNING: qcom,audio-ext-clk.h not found"
          
          # Check 6: List some binding files to verify
          echo ""
          echo "Sample binding files found:"
          find kernel/include/bindings -name "*.h" | head -5
          
          echo ""
          echo "=== Structure Summary ==="
          echo "Total binding header files:"
          echo "  - kernel/include/bindings: $(find kernel/include/bindings -name "*.h" 2>/dev/null | wc -l)"
          echo "  - kernel/include/dt-bindings/bindings: $(find kernel/include/dt-bindings/bindings -name "*.h" 2>/dev/null | wc -l)"
          echo "  - kernel/arch/arm64/boot/dts/vendor/bindings: $(find kernel/arch/arm64/boot/dts/vendor/bindings -name "*.h" 2>/dev/null | wc -l)"
          
          echo ""
          echo "=== All checks passed! ==="

      - name: Clone Toolchains
        run: |
          rm -rf mk-clang mk-gcc64 mk-gcc32 tools-lineage || true
          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b -b lineage-20.0 mk-clang
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 -b lineage-19.1 mk-gcc64
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 -b lineage-19.1 mk-gcc32
          git clone https://github.com/LineageOS/android_prebuilts_tools-lineage -b lineage-22.2 tools-lineage

      - name: Clone mkbootimg and avbtool
        run: |
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools/mkbootimg
          git clone https://android.googlesource.com/platform/external/avb tools/avb

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git ccache flex bison libssl-dev bc python3 libelf-dev dwarves

      - name: Build Kernel
        run: |
          BASEDIR=$PWD
          cd $BASEDIR/kernel

          mkdir -p out
          make mrproper
          make ARCH=arm64 O=out pdx234_defconfig

          export PATH=$BASEDIR/mk-clang/bin:$BASEDIR/mk-gcc64/bin:$BASEDIR/mk-gcc32/bin:$PATH
          export LD_LIBRARY_PATH=$BASEDIR/mk-clang/lib

          make ARCH=arm64 \
            O=out \
            LLVM=1 \
            LLVM_IAS=1 \
            CROSS_COMPILE=$BASEDIR/mk-gcc64/bin/aarch64-linux-android- \
            CROSS_COMPILE_ARM32=$BASEDIR/mk-gcc32/bin/arm-linux-androideabi- \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            -j$(nproc)

          if [ ! -f out/arch/arm64/boot/Image ]; then
            echo "Error: Kernel Image not found!"
            exit 1
          fi

          echo "Kernel Image built successfully: $(ls -lh out/arch/arm64/boot/Image | awk '{print $5}')"
          echo "Checking for built DTB files..."
          find out/arch/arm64/boot/dts -name "*.dtb" -type f 2>/dev/null | head -5 || echo "No DTB files found"

      - name: Find DTB File
        id: find_dtb
        run: |
          cd kernel
          DTB_FILE=$(find out/arch/arm64/boot/dts/vendor -name "*.dtb" -print -quit)
          if [ -z "$DTB_FILE" ]; then
            echo "Error: No DTB file found in the vendor directory."
            exit 1
          fi
          echo "Found DTB file: $DTB_FILE"
          echo "dtb_path=${{ github.workspace }}/kernel/$DTB_FILE" >> $GITHUB_OUTPUT

      - name: Create Boot Image
        run: |
          ls -la kernel/out/arch/arm64/boot/Image
          python3 tools/mkbootimg/mkbootimg.py \
            --header_version 4 \
            --kernel kernel/out/arch/arm64/boot/Image \
            --pagesize 4096 \
            --dtb ${{ steps.find_dtb.outputs.dtb_path }} \
            --os_version 15.0.0 \
            --os_patch_level 2025-07 \
            --output boot.img

          if [ ! -f boot.img ]; then
            echo "Error: boot.img not created!"
            exit 1
          fi
          echo "Unsigned boot image size: $(ls -lh boot.img | awk '{print $5}')"

      - name: Sign Boot Image with LineageOS Keys
        run: |
          git clone https://github.com/LineageOS/android_build -b lineage-22.2 --depth=1 build_keys
          openssl pkcs8 -inform DER -nocrypt -in build_keys/target/product/security/testkey.pk8 -out testkey.pem
          python3 tools/avb/avbtool.py add_hash_footer \
            --partition_name boot \
            --partition_size $((64 * 1024 * 1024)) \
            --image boot.img \
            --algorithm SHA256_RSA2048 \
            --key testkey.pem
          echo "Signed boot image size: $(ls -lh boot.img | awk '{print $5}')"
          python3 tools/avb/avbtool.py info_image --image boot.img

      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel/out/arch/arm64/boot/Image

      - name: Upload Boot Image
        uses: actions/upload-artifact@v4
        with:
          name: boot-image
          path: boot.img

      - name: Upload DTB/DTBO if exists
        uses: actions/upload-artifact@v4
        with:
          name: dtb-files
          path: |
            kernel/out/arch/arm64/boot/dts/**/*.dtb
            kernel/out/arch/arm64/boot/dtbo.img
          if-no-files-found: ignore

      - name: Upload Kernel Modules
        uses: actions/upload-artifact@v4
        with:
          name: kernel-modules
          path: |
            kernel/out/**/*.ko
          if-no-files-found: ignore

      - name: Upload Build Info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build_info.txt
