name: Simple Android Kernel Build
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check Kernel Source Cache
        id: cache-kernel
        uses: actions/cache@v3
        with:
          path: kernel
          key: kernel-source-sm8550-with-devicetrees
          
      - name: Checkout Kernel Source and Setup Devicetrees
        if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
        run: |
          # Clone kernel into 'kernel' subdirectory with full history
          git clone https://github.com/spacealtctrl/android_kernel_sony_sm8550 \
            -b lineage-22.2 kernel
          
          # Now clone devicetrees INTO the kernel directory
          cd kernel
          rm -rf arch/arm64/boot/dts/vendor
          git clone https://github.com/LineageOS/android_kernel_sony_sm8550-devicetrees.git \
            -b lineage-22.2 --depth=1 arch/arm64/boot/dts/vendor
          
          # Verify the setup
          echo "Verifying devicetree integration..."
          if [ ! -f "arch/arm64/boot/dts/vendor/qcom/audio/kalama-audio.dtsi" ]; then
            echo "ERROR: Devicetrees not integrated correctly!"
            exit 1
          fi
          echo "SUCCESS: Devicetrees integrated into kernel source"
          
      - name: Save Kernel Source to Cache
        if: ${{ steps.cache-kernel.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3
        with:
          path: kernel
          key: kernel-source-sm8550-with-devicetrees

      - name: Check Toolchains Cache
        id: cache-toolchains
        uses: actions/cache@v3
        with:
          path: |
            mk-clang
            mk-gcc64
            mk-gcc32
            tools-lineage
          key: toolchains-lineage-22.2

      - name: Clone Toolchains
        if: ${{ steps.cache-toolchains.outputs.cache-hit != 'true' }}
        run: |
          git clone https://github.com/LineageOS/android_prebuilts_clang_kernel_linux-x86_clang-r416183b -b lineage-20.0 mk-clang
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 -b lineage-19.1 mk-gcc64
          git clone https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 -b lineage-19.1 mk-gcc32
          git clone https://github.com/LineageOS/android_prebuilts_tools-lineage -b lineage-22.2 tools-lineage
          
      - name: Save Toolchains to Cache
        if: ${{ steps.cache-toolchains.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v3
        with:
          path: |
            mk-clang
            mk-gcc64
            mk-gcc32
            tools-lineage
          key: toolchains-lineage-22.2

      - name: Clone mkbootimg and avbtool
        run: |
          git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools/mkbootimg
          git clone https://android.googlesource.com/platform/external/avb tools/avb
          
      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git ccache flex bison libssl-dev bc python3 libelf-dev dwarves
          
      - name: Build Kernel
        run: |
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64
          export PATH=${{ github.workspace }}/mk-clang/bin:${{ github.workspace }}/mk-gcc64/bin:${{ github.workspace }}/mk-gcc32/bin:$PATH
          export LD_LIBRARY_PATH=${{ github.workspace }}/mk-clang/lib
          
          mkdir -p out
          make ARCH=arm64 mrproper
          
          make ARCH=arm64 O=out pdx234_defconfig
          
          make ARCH=arm64 \
            O=out \
            CC="ccache clang" \
            HOST_CC="ccache clang" \
            LD="ld.lld" \
            HOST_LD="ld.lld" \
            OBJDUMP="llvm-objdump" \
            OBJCOPY="llvm-objcopy" \
            STRIP="llvm-strip" \
            CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=${{ github.workspace }}/mk-gcc64/bin/aarch64-linux-android- \
            CROSS_COMPILE_ARM32=${{ github.workspace }}/mk-gcc32/bin/arm-linux-androideabi- \
            KCFLAGS="-Wframe-larger-than=15000" \
            LLVM_IAS=1 \
            DTC_EXT_FLAGS="-I${{ github.workspace }}/kernel/arch/arm64/boot/dts/vendor" \
            -j$(nproc)
          
          if [ ! -f out/arch/arm64/boot/Image ]; then
            echo "Error: Kernel Image not found!"
            exit 1
          fi
          echo "Kernel Image size: $(ls -lh out/arch/arm64/boot/Image | awk '{print $5}')"
          echo "Checking for built DTB files..."
          find out/arch/arm64/boot/dts -name "*.dtb" -type f 2>/dev/null | head -5 || echo "No DTB files found"

      - name: Find DTB File
        id: find_dtb
        run: |
          cd kernel
          DTB_FILE=$(find out/arch/arm64/boot/dts/vendor -name "*.dtb" -print -quit)
          if [ -z "$DTB_FILE" ]; then
            echo "Error: No DTB file found in the vendor directory."
            exit 1
          fi
          echo "Found DTB file: $DTB_FILE"
          echo "dtb_path=${{ github.workspace }}/kernel/$DTB_FILE" >> $GITHUB_OUTPUT

      - name: Create Boot Image
        run: |
          ls -la kernel/out/arch/arm64/boot/Image
          python3 tools/mkbootimg/mkbootimg.py \
            --header_version 4 \
            --kernel kernel/out/arch/arm64/boot/Image \
            --pagesize 4096 \
            --dtb ${{ steps.find_dtb.outputs.dtb_path }} \
            --os_version 15.0.0 \
            --os_patch_level 2025-07 \
            --output boot.img
          
          if [ ! -f boot.img ]; then
            echo "Error: boot.img not created!"
            exit 1
          fi
          echo "Unsigned boot image size: $(ls -lh boot.img | awk '{print $5}')"

      - name: Sign Boot Image with LineageOS Keys
        run: |
          git clone https://github.com/LineageOS/android_build -b lineage-22.2 --depth=1 build_keys
          
          openssl pkcs8 -inform DER -nocrypt -in build_keys/target/product/security/testkey.pk8 -out testkey.pem
          
          python3 tools/avb/avbtool.py add_hash_footer \
            --partition_name boot \
            --partition_size $((64 * 1024 * 1024)) \
            --image boot.img \
            --algorithm SHA256_RSA2048 \
            --key testkey.pem
          
          echo "Signed boot image size: $(ls -lh boot.img | awk '{print $5}')"
          python3 tools/avb/avbtool.py info_image --image boot.img

      - name: Upload Kernel Image
        uses: actions/upload-artifact@v4
        with:
          name: kernel-image
          path: kernel/out/arch/arm64/boot/Image

      - name: Upload Boot Image
        uses: actions/upload-artifact@v4
        with:
          name: boot-image
          path: boot.img

      - name: Upload DTB/DTBO if exists
        uses: actions/upload-artifact@v4
        with:
          name: dtb-files
          path: |
            kernel/out/arch/arm64/boot/dts/**/*.dtb
            kernel/out/arch/arm64/boot/dtbo.img
          if-no-files-found: ignore

      - name: Upload Kernel Modules
        uses: actions/upload-artifact@v4
        with:
          name: kernel-modules
          path: |
            kernel/out/**/*.ko
          if-no-files-found: ignore

      - name: Upload Build Info
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: build_info.txt
